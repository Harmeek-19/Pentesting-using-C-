Best practices to avoid writing vulnerable code:



validate input from all sources

usr memory safe constructs like smart pointers or reference counting to prevent common vulnerabilities like buffer overflows and null pointer dereferences.

library functionsd must be used correctly  to avoid common vulnerabilities



Code review:

Reguar code review identify potential vulnerabilities early in the development process

collaboration with other developers can enhance learning from one another and result in best practicves for improved code quality and security

this can be utilized with the help of an automated code review tool.


Testing for vulnerabilities:

test code regularly for vulnerabilities like buffer overflows, input validation, memory leaks etc.

automating testing tools must be utilized which improve testing efficiency and test coverage.

testing should never be stopped.


Poper Education:

educate developers and team members about more secure coding practices.

acquirw training to write secure c++ code.

ongoing education is essential to stay up to daye with evolving threats.




SECTION 4:

Network protocols are a set of rules that govern communication between devices on a network.
These protocols ensure that data is transmitted accurately and efficiently on the network

TCP/Ip protocol is the most common protocol suite based on the internet, consisting of the transmission control protocol and the internet protocol

Osi model is a conceptual model for understanding network protocols, consisting of seven layers that represent different aspects of network communication.
OSI stands fpr Open Systems Interconnection

1st layer Physical layer :
this layer deals with the physical connection between devices such as cable,connectors, and electrical signals. it defines the specifications for transmitting raw data over a physical medium.

Data Link Layer:
the data link layer is responsible for the reliable transmission of data between adjacent nodes on a network. It handleserror detection and correctiobn, as well as the formatting and framing of data packets.

Network Layer:
the network layer is responsible for routing and forwarding data packets between different networks. it determines the best path for data to travel from the source to the destination based on network conditions and addresses
such as ip addresses

Transport layer:
this layer ensures reliable end to end communication between devices. it handles the sefmentation and reassembly of data, as well as error detection and correction. Protocols such as TCP (Transmission control protocol ) operate at this layer.

Session Layer:
This layer establishes,maintains,and terminates connections bettween devices.it also manages sessions or ongoing interactions between applications on different devices.

Presentation Layer:
The presentation layer is reponsible for data translation,encryption and compression.It ensures that data exchanged between applications is in a format that both the sender and reciever can understand.

Application Layer:
The application layer is the topmost layer of the OSI model.It provides network services directly to end users and application prcesses.
Protocols such as HTTP,SMTP,FTP and DNS operate at this layer

Examples of Common Protocols:

HTTP: Used for transferring data to and from web servers/sites.
(Hyper Text Transfer Protocol)

FTP: Used for transferring files between devices.
(File Transfer Protoccol)

SMTP: Used for sending mail.
(Simple Mail Transfer Protocol)

Network Libraries and Frameworks:

1. Boost.Asio:

It is a C++ library for network and low level I/O programming, providing a cross platform, object oriented API.

2. Poco: It is a C++ framework for network and low level I/O programming, providing a modular ,and scalable architecture.


Basic Components of a network application:

Socket:
A network endpoint that allows communication between devices.

Address and Port:
A unique combination that identifies a specific device on the netwrork.

Protocol:
A set of rules and standards that govern communication between devices


The two main types of network appliications are servers nad clients, with the server providing services and the client consuming them.

Socket Programming Basics:

A socket is an endpoint for communication between two devices.
Socket use a protocol to define the rules and format of communication.
TCP and UDP(User datagram protocols )are the commonly used protocols in networking.

Creating a Socket in C++
Use the socket() function to create a socket object.
Set the socket properties, such as the address family and socket type.

Connecting to a server using a socket:

USe the connect() function to establish a connection to a server.
Specify the server's IP address and port number.

Sending and recieving data using a socketL

Use the send() function to send data to the server.
Use the recv() function to recieve data from the server.

Examples of network clients are WEB client, FTP client, email client.



curl example.com --libcurl code.c

now we just make an http get request to example.com and have recieved the HTML back.
HOwever the Lip Crl flag took the request that we just made and created C code for us to run that will execute the same exact request except using the c or c++ lang.

The one requirement we have for running the C code is that curl needs to be installed as a library.
vcpkg makes it super easy for us as it is a free, open source C/C++ package manager for acquiring and managing libraries.

cat code.c

